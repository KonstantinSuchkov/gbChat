client_app.py
==========
Клиентское приложение, GUI

class AuthWindow(QDialog):
    # Окно ввода логина и пароля для аутентификации.

class Widget(Qt.QWidget):
   # Небольшой виджет для отображения клиентов для отправки писем только одному клиенту

# основное окно приложения
class MainClientWindow(QMainWindow):

        # основная таблица для отображения данных
        # инструкция
        (' 1. Нажать на "Обновить Онлайн"\n 2. Нажать на "Ваш список контактов"\n Заполнить '
        'окно текста и нажать "кнопку отправить"\n Сообщение будет отправлено всем клиентам,'
        '\n удовлетваряющим требованиям:\n 1) Клиент онлайн\n 2) Клиент в списке контактов\n '
        'Для отправки только одному клиенту:\n Написать текст сообщения\n Двойное нажатие на '
        'список контактов\n Двойное нажатие мышью на имени адресата\n "Вывести чат" - '
        'отображение сообщений', self)
        # кнопка добавить контакт
        # кнопка удалить контакт
        # кнопка отправить сообщение
        # поле ввода текста

    def send_to_one(self, item):
         # обработка сигнала при отправке сообщения одному получателя при нажатии мыши

    def start(self):
        # отображение списка клиентов, для отправки ссобщений каждому клиенту по щелчку мыши
        # в отдельном окне
        # при двойном нажатии на имя - отправка кдиенту

    def contact_list(self, db, online, chat_arr):
        # метод для отображения таблицы с онлайн-клиентами
        # при вызове метода меняем основную таблицу

    def history_table(self, db, online, chat_arr):
        # метод для отображения таблицы с историей переписки
        # при вызове метода меняем основную таблицу

    def write_online(self, db, online, chat_arr):
        # при вызове метода меняем основную таблицу

    def write_chat(self, db, online, chat_arr):
        # отображение чата (входящие и исходящие сообщения)
        # при вызове метода меняем основную таблицу

    def showAddDialog(self):
        # диалог добавления нового контакта

    def showDelDialog(self):
        # диалог удаления контакта

    def on_changed_value(self, value):
        # сигнал, для добавления контакта, client.py ожидает сигнала для выполнения
        # инструкций по добавлению контактов в клиентскую базу данных.

    def return_new_contact(self):
        # передача в client.py контакта-получателя

    def message_signal(self):
        # сигнал, для client.py для отправки сообщения
        # кнопка отключится на 1 секунду для защиты от спама

    def show_message(self):
        # передача сообщения в client.py
        # отображение сообщения в терминале

    def show_message_to_one(self):
        # передача сообщения в client.py
        self.message = [self.text.text(), [self.contact]]  # при отправке одному клиенту сообщение будет иметь
        print(self.message[0])  # тип "список", вторым элементом которого будет никнейм получателя сообщения

    def show_table(self, content):
        # метод отображения таблицы в основном окне

    def sleep1sec(self):
        # антиспам защита

==========